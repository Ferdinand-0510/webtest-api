{"ast":null,"code":"// 1. 導入必要的 React Hooks 和 axios\nimport React,{createContext,useState,useContext,useEffect}from'react';import axios from'axios';// 2. 創建一個新的 Context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);// 3. 配置 axios 實例\nconst api=axios.create({baseURL:'http://localhost:5000',// 設置API基礎URL\nwithCredentials:true,// 允許跨域請求攜帶cookie\nheaders:{'Content-Type':'application/json'// 設置請求頭\n}});// 4. 創建 AuthProvider 組件\nexport const AuthProvider=_ref=>{let{children}=_ref;// 5. 定義狀態\nconst[user,setUser]=useState(null);// 存儲用戶信息\nconst[loading,setLoading]=useState(true);// 加載狀態\n// 6. 檢查session狀態的函數\nconst checkSession=async()=>{try{// 向後端發送請求檢查session\nconst response=await api.get('/api/check-session');if(response.data.loggedIn){setUser(response.data.user);// 如果已登入，設置用戶信息\n}}catch(error){console.error('Session檢查失敗:',error);}finally{setLoading(false);// 無論成功失敗都結束加載狀態\n}};// 7. 組件掛載時檢查session\nuseEffect(()=>{checkSession();},[]);// 8. 註冊函數\nconst register=async userData=>{try{// 發送註冊請求\nconst response=await api.post('/api/register',{username:userData.username,email:userData.email,password:userData.password,phone:userData.phone,customerUuid:userData.customerUuid||'default-uuid'});// 處理註冊響應\nif(response.data.success){return{success:true,message:'註冊成功'};}return{success:false,message:response.data.message};}catch(error){var _error$response,_error$response$data;// 錯誤處理\nconsole.error('註冊失敗:',error);return{success:false,message:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'註冊失敗，請稍後再試'};}};// 9. 登入函數\nconst login=async(username,password)=>{try{// 發送登入請求\nconst response=await api.post('/api/login',{username,password});// 處理登入響應\nif(response.data.success){setUser(response.data.user);// 設置用戶狀態\nreturn true;}return false;}catch(error){console.error('登入失敗:',error);return false;}};// 10. 登出函數\nconst logout=async()=>{try{// 發送登出請求\nawait api.post('/api/logout');setUser(null);// 清除用戶狀態\n}catch(error){console.error('登出失敗:',error);}};// 11. 加載狀態處理\nif(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}// 12. 提供 Context 值\nreturn/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,// 用戶信息\nlogin,// 登入函數\nlogout,// 登出函數\nregister,// 註冊函數\nloading,// 加載狀態\nisAuthenticated:!!user,// 是否已認證\napi// API實例\n},children:children});};// 13. 創建自定義 Hook\nexport const useAuth=()=>{const context=useContext(AuthContext);// 確保 Hook 在 Provider 內使用\nif(!context){throw new Error('useAuth必須在AuthProvider內使用');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsx","_jsx","AuthContext","api","create","baseURL","withCredentials","headers","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkSession","response","get","data","loggedIn","error","console","register","userData","post","username","email","password","phone","customerUuid","success","message","_error$response","_error$response$data","login","logout","Provider","value","isAuthenticated","useAuth","context","Error"],"sources":["C:/類D槽/Python/StockWeb/webtest/src/context/AuthContext.js"],"sourcesContent":["// 1. 導入必要的 React Hooks 和 axios\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// 2. 創建一個新的 Context\r\nconst AuthContext = createContext(null);\r\n\r\n// 3. 配置 axios 實例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000',  // 設置API基礎URL\r\n  withCredentials: true,             // 允許跨域請求攜帶cookie\r\n  headers: {\r\n    'Content-Type': 'application/json'  // 設置請求頭\r\n  }\r\n});\r\n\r\n// 4. 創建 AuthProvider 組件\r\nexport const AuthProvider = ({ children }) => {\r\n  // 5. 定義狀態\r\n  const [user, setUser] = useState(null);        // 存儲用戶信息\r\n  const [loading, setLoading] = useState(true);  // 加載狀態\r\n\r\n  // 6. 檢查session狀態的函數\r\n  const checkSession = async () => {\r\n    try {\r\n      // 向後端發送請求檢查session\r\n      const response = await api.get('/api/check-session');\r\n      if (response.data.loggedIn) {\r\n        setUser(response.data.user);  // 如果已登入，設置用戶信息\r\n      }\r\n    } catch (error) {\r\n      console.error('Session檢查失敗:', error);\r\n    } finally {\r\n      setLoading(false);  // 無論成功失敗都結束加載狀態\r\n    }\r\n  };\r\n\r\n  // 7. 組件掛載時檢查session\r\n  useEffect(() => {\r\n    checkSession();\r\n  }, []);\r\n\r\n  // 8. 註冊函數\r\n  const register = async (userData) => {\r\n    try {\r\n      // 發送註冊請求\r\n      const response = await api.post('/api/register', {\r\n        username: userData.username,\r\n        email: userData.email,\r\n        password: userData.password,\r\n        phone: userData.phone,\r\n        customerUuid: userData.customerUuid || 'default-uuid'\r\n      });\r\n\r\n      // 處理註冊響應\r\n      if (response.data.success) {\r\n        return {\r\n          success: true,\r\n          message: '註冊成功'\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      // 錯誤處理\r\n      console.error('註冊失敗:', error);\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || '註冊失敗，請稍後再試'\r\n      };\r\n    }\r\n  };\r\n\r\n  // 9. 登入函數\r\n  const login = async (username, password) => {\r\n    try {\r\n      // 發送登入請求\r\n      const response = await api.post('/api/login', {\r\n        username,\r\n        password\r\n      });\r\n\r\n      // 處理登入響應\r\n      if (response.data.success) {\r\n        setUser(response.data.user);  // 設置用戶狀態\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('登入失敗:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 10. 登出函數\r\n  const logout = async () => {\r\n    try {\r\n      // 發送登出請求\r\n      await api.post('/api/logout');\r\n      setUser(null);  // 清除用戶狀態\r\n    } catch (error) {\r\n      console.error('登出失敗:', error);\r\n    }\r\n  };\r\n\r\n  // 11. 加載狀態處理\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // 12. 提供 Context 值\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user,                // 用戶信息\r\n      login,              // 登入函數\r\n      logout,             // 登出函數\r\n      register,           // 註冊函數\r\n      loading,            // 加載狀態\r\n      isAuthenticated: !!user,  // 是否已認證\r\n      api                 // API實例\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// 13. 創建自定義 Hook\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  // 確保 Hook 在 Provider 內使用\r\n  if (!context) {\r\n    throw new Error('useAuth必須在AuthProvider內使用');\r\n  }\r\n  return context;\r\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC7E,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,IAAI,CAAC,CAEvC;AACA,KAAM,CAAAQ,GAAG,CAAGJ,KAAK,CAACK,MAAM,CAAC,CACvBC,OAAO,CAAE,uBAAuB,CAAG;AACnCC,eAAe,CAAE,IAAI,CAAc;AACnCC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAoB;AACtC,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC;AACA,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAS;AAC/C,KAAM,CAACiB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAG;AAE/C;AACA,KAAM,CAAAmB,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACc,GAAG,CAAC,oBAAoB,CAAC,CACpD,GAAID,QAAQ,CAACE,IAAI,CAACC,QAAQ,CAAE,CAC1BP,OAAO,CAACI,QAAQ,CAACE,IAAI,CAACP,IAAI,CAAC,CAAG;AAChC,CACF,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACtC,CAAC,OAAS,CACRN,UAAU,CAAC,KAAK,CAAC,CAAG;AACtB,CACF,CAAC,CAED;AACAhB,SAAS,CAAC,IAAM,CACdiB,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAO,QAAQ,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACnC,GAAI,CACF;AACA,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACqB,IAAI,CAAC,eAAe,CAAE,CAC/CC,QAAQ,CAAEF,QAAQ,CAACE,QAAQ,CAC3BC,KAAK,CAAEH,QAAQ,CAACG,KAAK,CACrBC,QAAQ,CAAEJ,QAAQ,CAACI,QAAQ,CAC3BC,KAAK,CAAEL,QAAQ,CAACK,KAAK,CACrBC,YAAY,CAAEN,QAAQ,CAACM,YAAY,EAAI,cACzC,CAAC,CAAC,CAEF;AACA,GAAIb,QAAQ,CAACE,IAAI,CAACY,OAAO,CAAE,CACzB,MAAO,CACLA,OAAO,CAAE,IAAI,CACbC,OAAO,CAAE,MACX,CAAC,CACH,CACA,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEf,QAAQ,CAACE,IAAI,CAACa,OACzB,CAAC,CACH,CAAE,MAAOX,KAAK,CAAE,KAAAY,eAAA,CAAAC,oBAAA,CACd;AACAZ,OAAO,CAACD,KAAK,CAAC,OAAO,CAAEA,KAAK,CAAC,CAC7B,MAAO,CACLU,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,EAAAC,eAAA,CAAAZ,KAAK,CAACJ,QAAQ,UAAAgB,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBd,IAAI,UAAAe,oBAAA,iBAApBA,oBAAA,CAAsBF,OAAO,GAAI,YAC5C,CAAC,CACH,CACF,CAAC,CAED;AACA,KAAM,CAAAG,KAAK,CAAG,KAAAA,CAAOT,QAAQ,CAAEE,QAAQ,GAAK,CAC1C,GAAI,CACF;AACA,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACqB,IAAI,CAAC,YAAY,CAAE,CAC5CC,QAAQ,CACRE,QACF,CAAC,CAAC,CAEF;AACA,GAAIX,QAAQ,CAACE,IAAI,CAACY,OAAO,CAAE,CACzBlB,OAAO,CAACI,QAAQ,CAACE,IAAI,CAACP,IAAI,CAAC,CAAG;AAC9B,MAAO,KAAI,CACb,CACA,MAAO,MAAK,CACd,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,OAAO,CAAEA,KAAK,CAAC,CAC7B,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAe,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,GAAI,CACF;AACA,KAAM,CAAAhC,GAAG,CAACqB,IAAI,CAAC,aAAa,CAAC,CAC7BZ,OAAO,CAAC,IAAI,CAAC,CAAG;AAClB,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,OAAO,CAAEA,KAAK,CAAC,CAC/B,CACF,CAAC,CAED;AACA,GAAIP,OAAO,CAAE,CACX,mBAAOZ,IAAA,QAAAS,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA;AACA,mBACET,IAAA,CAACC,WAAW,CAACkC,QAAQ,EAACC,KAAK,CAAE,CAC3B1B,IAAI,CAAiB;AACrBuB,KAAK,CAAe;AACpBC,MAAM,CAAc;AACpBb,QAAQ,CAAY;AACpBT,OAAO,CAAa;AACpByB,eAAe,CAAE,CAAC,CAAC3B,IAAI,CAAG;AAC1BR,GAAoB;AACtB,CAAE,CAAAO,QAAA,CACCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED;AACA,MAAO,MAAM,CAAA6B,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAG3C,UAAU,CAACK,WAAW,CAAC,CACvC;AACA,GAAI,CAACsC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}